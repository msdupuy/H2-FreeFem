load "Element_P3"

// Parametres physiques

int size=1;
int boxsize=2;

real Lx=10*boxsize;
real Ly=5*boxsize;

int Nx = 10*size;
int Ny = 5*size;

//real h = max(Lx/Nx,Ly/Ny);

//real Rmax=10;
int indiceMax=1;

//splitmesh parameter (in log10 scale)
real meshmin = 0.1;
int meshmax = 10;
real stepmesh = 0.1;
int iter = 1;

for (int indice=0;indice<indiceMax;indice++)
  {
	real R = 3.1;
	real Rs2 = R/2;

	{  //open file
	ofstream file("dissociation"+R+".txt");
	file << "# Adaptmesh parameter \t energie " << endl;
	
	//	real err0 = 10^(errmax - Imesh*stepmesh);

	// Construction et visualisation du maillage

	
	for (int Imesh=0; Imesh<meshmax;Imesh++){

	real rc = meshmin + Imesh*stepmesh;
	
	border S11(t=0,1){x=-Lx/2+t*(Lx/2-Rs2-rc) ;y=0;label=1;} //left side of the box to PAW ball
	border S12(t=0,1){x=-Rs2-rc + 2*t*rc  ;y=0;label=1;}	//PAW ball
	border S13(t=0,1){x=-Rs2+rc + 2*t*(Rs2-rc) ;y=0;label=1;} //interatomic distance
	border S14(t=0,1){x=Rs2-rc + 2*t*rc;y=0;label=1;}	//PAW ball
	border S15(t=0,1){x=Rs2+rc +t*(-Rs2-rc+Lx/2);y=0;label=1;} //PAW ball to right side of the box
	
	border S2(t=0,1){x=Lx/2; y=t*Ly;label=2;} 	//right
	border S3(t=0,1){x=Lx/2-t*Lx; y=Ly;label=3;} //top
	border S4(t=0,1){x=-Lx/2; y=Ly-t*Ly;label=4;} //left

	border PAW11(t=0,pi){x=-rc*cos(t)-Rs2; y=rc*sin(t);label=5;}
//	border PAW12(t=0,1){x=-rc+2*t*rc-Rs2; y = 0.;label=6;}
	border PAW21(t=0,pi){x=-rc*cos(t)+Rs2; y=rc*sin(t);label=7;}
//	border PAW22(t=0,1){x=-rc+2*t*rc+Rs2; y = 0.;label=8;}

	// Construction et visualisation du maillage
//	mesh Th = buildmesh (S11(Nx/2) + S12(Imesh+2) + S13(Nx/5) + S14(Imesh+2) + S15(Nx/2)+S2(Ny)+S3(Nx)+S4(Ny)+PAW11(-(Imesh+2))+PAW21(-(Imesh+2)));
	mesh Th = buildmesh (S11(Nx/2) + S12(4) + S13(Nx/5) + S14(4) + S15(Nx/2)+S2(Ny)+S3(Nx)+S4(Ny)+PAW11(-(4))+PAW21(-(4)));

	Th=splitmesh(Th, 1 + 1/rc*(exp(-sqrt((x-Rs2)^2+y^2)/rc) + exp(-sqrt((x + Rs2)^2+y^2)/rc)) );
	plot(Th);
	
	fespace Vh(Th,P3);	//definition de l'espace 
	Vh uh,vh;	//definition de l'inconnu et des fonctions tests

	real sigma=-2; // paramètre de shift pour le shift and invert qui calcule les valeurs propres.


	varf hamiltonien(uh,vh) =int2d(Th)(0.5*y*(dx(uh)*dx(vh)+dy(uh)*dy(vh))-(y/sqrt((x-Rs2)^2+y^2))*uh*vh-(y/sqrt((x+Rs2)^2+y^2))*uh*vh-sigma*y*uh*vh) 
	  +on(2,3,4,uh=0);

	varf masse(uh,vh) =int2d(Th)(y*uh*vh);



	// Calcul des 5 modes propres de plus basse frequence 

	//int nev=10*size^2;  

	int nev=3;  
	real[int] ev(nev);  
	Vh[int] [eV](nev);  

	int k;

	for (int i=0; i<iter;i++)
	  {
 
		// Assemblage des matrices de ridigite et de masse
		//	plot(Th,wait=1);
	
		matrix H= hamiltonien(Vh,Vh,solver=UMFPACK,factorize=0);
		matrix S= masse(Vh,Vh,solver=UMFPACK);

		k=EigenValue(H,S,sym=true,sigma=sigma,value=ev,vector=eV,tol=1e-8,maxit=0,ncv=0);
		file << rc << "\t" << ev[0]+1/R << endl;
		
		k=min(k,nev);
		mesh Sh;
		for (int nvp=0;nvp<k;nvp++)
		  {
			cout << " Valeur propre " << nvp+1 << " : " << ev[nvp] << endl;
			cout << " Energie       " << nvp+1 << " : " << ev[nvp]+1/R << endl;
			//Vh uh1 = eV[nvp]  ;
			//Vh gradient = abs(dx(uh1)) + abs(dy(uh1));
			//plot(gradient,fill=true,value=true,wait=true);
			//  plot(uh1,fill=true,value=true,wait=true);
		  }
		
	  }


	
	}

  }

  }





